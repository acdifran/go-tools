{{ define "lib/privacyrule/helpers" }}
{{- $pkg := "privacyrule" -}}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

func allowIfThroughQuery(ctx context.Context, queryType string) error {
	queryPathCtx := interceptor.QueryPathFromContext(ctx)
	if queryPathCtx == nil {
		return privacy.Skipf("no query path")
	}
	lastQuery, ok := utils.Last(queryPathCtx.Path)
	if !ok {
		return privacy.Skipf("no query path")
	}
	if lastQuery == queryType {
		return privacy.Allowf("AllowIfThroughQuery passed")
	}
	return privacy.Skip
}

func AllowIfThroughQuery(queryType string) privacy.QueryRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		if errors.Is(allowIfThroughQuery(ctx, queryType), privacy.Allow) {
			return privacy.Allow
		}
		return privacy.Skip
	})
}

{{ end }}