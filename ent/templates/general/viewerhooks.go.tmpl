{{ define "lib/hooks/baseviewer" }}
{{- $pkg := "hooks" -}}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

type MutationWithOrg interface {
	OrganizationID() (r pulid.ID, exits bool)
	SetOrganizationID(id pulid.ID)
}

func SetOrgHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}

			tm, ok := m.(MutationWithOrg)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}

			if vc.HasOrg() {
				if _, ok := tm.OrganizationID(); !ok {
					tm.SetOrganizationID(vc.OrgID)
				}
			}
			return next.Mutate(ctx, m)
		})
	}
}

type MutationWithActor interface {
	ActorID() (r pulid.ID, exits bool)
	SetActorID(id pulid.ID)
}

func SetActorHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}

			tm, ok := m.(MutationWithActor)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}

			if _, ok := tm.ActorID(); !ok {
				tm.SetActorID(vc.ID)
			}
			return next.Mutate(ctx, m)
		})
	}
}

type MutationWithUser interface {
	UserID() (r pulid.ID, exits bool)
	SetUserID(id pulid.ID)
}

func SetUserHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}

			tm, ok := m.(MutationWithUser)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}

			if _, ok := tm.UserID(); !ok {
				tm.SetUserID(vc.ID)
			}
			return next.Mutate(ctx, m)
		})
	}
}

type MutationWithCreatedBy interface {
	CreatedByID() (r pulid.ID, exits bool)
	SetCreatedByID(id pulid.ID)
}

func SetCreatedByHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}

			tm, ok := m.(MutationWithCreatedBy)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}

			if _, ok := tm.CreatedByID(); !ok {
				tm.SetCreatedByID(vc.ID)
			}
			return next.Mutate(ctx, m)
		})
	}
}

{{ end }}