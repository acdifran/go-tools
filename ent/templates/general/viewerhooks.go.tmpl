{{ define "lib/hooks/baseviewer" }}
{{- $pkg := "hooks" -}}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

func SetOrgHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}
			if vc.HasOrg() {
				if _, ok := m.Field("organization_id"); !ok {
					err := m.SetField("organization_id", vc.OrgID)
					if err != nil {
						return nil, fmt.Errorf(
							"setting organization_id on %v in hook: %w",
							m.Type(),
							err,
						)
					}
				}
			}
			return next.Mutate(ctx, m)
		})
	}
}

type MutationWithActor interface {
	ActorID() (r pulid.ID, exits bool)
	SetActorID(id pulid.ID)
}

func SetActorHook() func(next ent.Mutator) ent.Mutator {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			vc := viewer.FromContext(ctx)
			if vc.IsAnonymous() {
				return nil, fmt.Errorf("viewer has no identity")
			}

			tm, ok := m.(MutationWithActor)
			if !ok {
				return nil, fmt.Errorf("unexptected mutation type %T", m)
			}

			if _, ok := tm.ActorID(); !ok {
				tm.SetActorID(vc.ID)
			}
			return next.Mutate(ctx, m)
		})
	}
}

{{ end }}