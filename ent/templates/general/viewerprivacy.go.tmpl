{{ define "lib/privacyrule/baseviewer" }}
{{- $pkg := "privacyrule" -}}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

func DenyIfAnonymous() privacy.QueryMutationRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		vc := viewer.FromContext(ctx)
		if vc.IsAnonymous() {
			return privacy.Denyf("viewer is anonymous")
		}
		return privacy.Skip
	})
}

func AllowIfAllPowerful() privacy.QueryMutationRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		vc := viewer.FromContext(ctx)
		if vc.IsAllPowerful() {
			return privacy.Allow
		}
		return privacy.Skip
	})
}

func AllowIfOmni() privacy.QueryMutationRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		vc := viewer.FromContext(ctx)
		if vc.IsOmni() {
			return privacy.Allow
		}
		return privacy.Skip
	})
}

func AllowIfEmployee() privacy.QueryMutationRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		vc := viewer.FromContext(ctx)
		if vc.IsEmployee() {
			return privacy.Allow
		}
		return privacy.Skip
	})
}

func AllowIfOrgAdmin() privacy.QueryMutationRule {
	return privacy.ContextQueryMutationRule(func(ctx context.Context) error {
		vc := viewer.FromContext(ctx)
		if vc.IsOrgAdmin() {
			return privacy.Allow
		}
		return privacy.Skip
	})
}

type WithOrgMutation interface {
	OrganizationID() (pulid.ID, bool)
	ent.Mutation
}

func DenyIfOrgMismatchedRule() privacy.MutationRule {
	return privacy.MutationRuleFunc(
		func(ctx context.Context, m ent.Mutation) error {
			tm, ok := m.(WithOrgMutation)
			if !ok {
				return privacy.Denyf("unexpected ent mutation type %T", m)
			}

			vc := viewer.FromContext(ctx)

			orgID, ok := tm.OrganizationID()
			if ok && orgID != vc.OrgID {
				return privacy.Denyf(
					"viewer org does not match; vc.OrgID: %s is not orgID: %s",
					vc.OrgID,
					orgID,
				)
			}

			return privacy.Skip
		},
	)
}

type MutationWithActor interface {
	ActorID() (r pulid.ID, exits bool)
	SetActorID(ID pulid.ID)
}

func DenyIfActorMismatchedRule() privacy.MutationRule {
	return privacy.MutationRuleFunc(
		func(ctx context.Context, m ent.Mutation) error {
			tm, ok := m.(MutationWithActor)
			if !ok {
				return privacy.Denyf(
					"%s: unexpected ent mutation type %T",
					utils.GetFuncName(),
					m,
				)
			}

			vc := viewer.FromContext(ctx)
			actorID, ok := tm.ActorID()

			if ok && actorID != vc.ID {
				return privacy.Denyf(
					"viewer does not match; vc.ID: %s is not message actorID (agentID or userID): %s",
					vc.ID,
					actorID,
				)
			}

			return privacy.Skip
		},
	)
}

type MutationWithUser interface {
	UserID() (r pulid.ID, exits bool)
	SetUserID(ID pulid.ID)
}

func DenyIfUserMismatchedRule() privacy.MutationRule {
	return privacy.MutationRuleFunc(
		func(ctx context.Context, m ent.Mutation) error {
			tm, ok := m.(MutationWithUser)
			if !ok {
				return privacy.Denyf(
					"%s: unexpected ent mutation type %T",
					utils.GetFuncName(),
					m,
				)
			}

			vc := viewer.FromContext(ctx)
			userID, ok := tm.UserID()

			if ok && userID != vc.ID {
				return privacy.Denyf(
					"viewer does not match; vc.ID: %s is not userID: %s",
					vc.ID,
					userID,
				)
			}

			return privacy.Skip
		},
	)
}

type OrgFilter interface {
	WhereOrganizationID(entql.StringP)
}

func FilterByViewerOrgRule() privacy.QueryMutationRule {
	return privacy.FilterFunc(func(ctx context.Context, f privacy.Filter) error {
		tf, ok := f.(OrgFilter)
		if !ok {
			return privacy.Denyf("unexpected filter type %T", f)
		}

		vc := viewer.FromContext(ctx)
		if vc.IsAries() {
			return privacy.Skip
		}

		if vc.HasOrg() {
			tf.WhereOrganizationID(entql.StringEQ(string(vc.OrgID)))
		} else {
			tf.WhereOrganizationID(entql.StringNil())
		}
		return privacy.Skip
	})
}

type ActorFilter interface {
	WhereActorIDEQ(id pulid.ID)
}

func FilterByViewerIsActorRule() privacy.QueryMutationRule {
	return privacy.FilterFunc(func(ctx context.Context, f privacy.Filter) error {
		tf, ok := f.(ActorFilter)
		if !ok {
			return privacy.Denyf("unexpected filter type %T", f)
		}

		vc := viewer.FromContext(ctx)
		tf.WhereActorIDEQ(vc.ID)

		return privacy.Skip
	})
}

type UserFilter interface {
	WhereUserID(entql.StringP)
}

func FilterByViewerIsUserRule() privacy.QueryMutationRule {
	return privacy.FilterFunc(func(ctx context.Context, f privacy.Filter) error {
		tf, ok := f.(UserFilter)
		if !ok {
			return privacy.Denyf("unexpected filter type %T", f)
		}

		vc := viewer.FromContext(ctx)
		tf.WhereUserID(entql.StringEQ(string(vc.ID)))
		return privacy.Skip
	})
}

{{ end }}