{{ define "customcollectedfields" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

	{{- range $node := $.Nodes }}
		{{- range $i, $e := $node.Edges }}
			{{- if eq $e.Type.EdgeSchema.ID nil}}
				{{- range $a := $e.Annotations.EntGQL.CustomCollectedFields }}
					{{- $shouldadd := true }}
					{{- if and $a.SkipEdge (eq $e.Type.EdgeSchema.To nil) }}
					{{- $shouldadd = false }}
					{{- end }}
					{{- if and $a.SkipThroughEdge (ne $e.Type.EdgeSchema.To nil) }}
					{{- $shouldadd = false }}
					{{- end }}
					{{- $queryName := pascal $a.Name}}
					{{- $fieldsuf := $e.Name -}}
					{{- if or (eq $a.FieldType "Singular") (eq $a.FieldType "Existence") -}}
					{{- $fieldsuf = singular $e.Name -}}
					{{- end -}}
					{{- $fieldquery := $a.Name -}}
					{{- if eq $a.FieldType "Existence" -}}
					{{- $fieldquery = pascal $a.Name -}}
					{{- end -}}
					{{- $fieldpre := "" -}}
					{{- if eq $a.FieldType "Existence" -}}
					{{- $fieldpre = "has" -}}
					{{- end -}}
					{{- $fieldname := printf "%s%s%s" $fieldpre $fieldquery (pascal $fieldsuf) }}
					{{- $whereName := printf "WhereIs%s" $queryName -}}
					{{- if $a.WhereName -}}
					{{- $whereName = $a.WhereName -}}
					{{- end -}}
					{{- if $shouldadd}}
						{{- if eq $a.FieldType "Existence" -}}
							func ({{$node.Receiver}} *{{$node.QueryName}}) With{{pascal $fieldname}}(
								ctx context.Context,
								oneNode bool,
								opts ...func(*{{$e.Type.QueryName}}),
							) *{{$node.QueryName}} {
								fn := func(q *{{$e.Type.QueryName}}) {
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									pager := &{{lower $e.Type.Name}}Pager{order: order}
									{{- end }}
									if oneNode {
										{{- if $a.OrderFieldName }}
										q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
										{{- end }}
										q.Limit(1)
									} else {
										{{- if $e.Ref.Unique }}
										modify := entgql.LimitPerRow({{lower $node.Name}}.{{pascal $e.Name}}Column, 1{{ if $a.OrderFieldName }}, pager.orderExpr(q){{ end }})
										{{- else }}
										modify := entgql.LimitPerRow({{lower $node.Name}}.{{pascal $e.Name}}PrimaryKey[{{ if eq $e.Inverse "" }}0{{ else }}1{{ end }}], 1{{ if $a.OrderFieldName }}, pager.orderExpr(q){{ end }})
										{{- end }}
										q.modifiers = append(q.modifiers, modify)
									}
								}
								newOpts := append(opts, fn)
								return {{$node.Receiver}}.WithNamed{{pascal $e.Name}}("{{$a.Name}}", newOpts...)
							}

							func ({{$node.Receiver}} *{{$node.Name}}) {{pascal $fieldname}}(ctx context.Context) (bool, error) {
								items, err := {{$node.Receiver}}.Named{{pascal $e.Name}}("{{$a.Name}}")
								if IsNotLoaded(err) {
									q := {{$node.Receiver}}.Query{{pascal $e.Name}}()
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									q = q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
									{{- end }}
									return q.Exist(ctx)
								} else if err != nil {
									return false, err
								}
								return len(items) > 0, nil
							}
						{{else if eq $a.FieldType "Singular"}}
							func ({{$node.Receiver}} *{{$node.QueryName}}) With{{pascal $fieldname}}(
								ctx context.Context,
								oneNode bool,
								opts ...func(*{{$e.Type.QueryName}}),
							) *{{$node.QueryName}} {
								fn := func(q *{{$e.Type.QueryName}}) {
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									pager := &{{lower $e.Type.Name}}Pager{order: order}
									{{- end }}
									if oneNode {
										{{- if $a.OrderFieldName }}
										q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
										{{- end }}
										q.Limit(1)
									} else {
										{{- if $e.Ref.Unique }}
										modify := entgql.LimitPerRow({{lower $node.Name}}.{{pascal $e.Name}}Column, 1{{ if $a.OrderFieldName }}, pager.orderExpr(q){{ end }})
										{{- else }}
										modify := entgql.LimitPerRow({{lower $node.Name}}.{{pascal $e.Name}}PrimaryKey[{{ if eq $e.Inverse "" }}0{{ else }}1{{ end }}], 1{{ if $a.OrderFieldName }}, pager.orderExpr(q){{ end }})
										{{- end }}
										q.modifiers = append(q.modifiers, modify)
									}
								}
								newOpts := append(opts, fn)
								return {{$node.Receiver}}.WithNamed{{pascal $e.Name}}("{{$a.Name}}", newOpts...)
							}

							func ({{$node.Receiver}} *{{$node.Name}}) {{pascal $fieldname}}(ctx context.Context) (*{{$e.Type.Name}}, error) {
								items, err := {{$node.Receiver}}.Named{{pascal $e.Name}}("{{$a.Name}}")
								if IsNotLoaded(err) {
									q := {{$node.Receiver}}.Query{{pascal $e.Name}}()
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
									{{- end }}
									return q.First(ctx)
								} else if err != nil {
									return nil, err
								}
								if len(items) == 0 {
									return nil, nil
								}
								return items[0], nil
							}
						{{else if eq $a.FieldType "Connection"}}
							func ({{$node.Receiver}} *{{$node.QueryName}}) With{{pascal $fieldname}}(
								ctx context.Context,
								opts ...func(*{{$e.Type.QueryName}}),
							) *{{$node.QueryName}} {
								fn := func(q *{{$e.Type.QueryName}}) {
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
									{{- end }}
								}
								newOpts := append(opts, fn)
								return {{$node.Receiver}}.WithNamed{{pascal $e.Name}}("{{$a.Name}}", newOpts...)
							}

							func ({{$node.Receiver}} *{{$node.Name}}) {{pascal $fieldname}}(
								ctx context.Context, after *Cursor, first *int, before *Cursor, last *int,
								{{- if not $a.OrderFieldName }} orderBy *{{$node.Name}}Order,{{ end }}
							) (*{{$e.Type.Name}}Connection, error) {
								{{- if $a.OrderFieldName }}
								orderBy := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
								{{- end }}
								opts := []{{$e.Type.Name}}PaginateOption{
									With{{$e.Type.Name}}Order(orderBy),
								}
								alias := "{{$a.Name}}"
								totalCount, hasTotalCount := {{$node.Receiver}}.Edges.totalCount[{{$i}}][alias]
								if nodes, err := {{$node.Receiver}}.Named{{pascal $e.Name}}(alias); err == nil || hasTotalCount {
									pager, err := new{{$e.Type.Name}}Pager(opts, last != nil)
									if err != nil {
										return nil, err
									}
									conn := &{{$e.Type.Name}}Connection{Edges: []*{{$e.Type.Name}}Edge{}, TotalCount: totalCount}
									conn.build(nodes, pager, after, first, before, last)
									return conn, nil
								}
								q := {{$node.Receiver}}.Query{{pascal $e.Name}}()
								{{- if $a.IncludeWhere }}
								q.{{$whereName}}(ctx)
								{{- end }}
								return q.Paginate(ctx, after, first, before, last, opts...)
							}
						{{else if eq $a.FieldType "List"}}
							func ({{$node.Receiver}} *{{$node.QueryName}}) With{{pascal $fieldname}}(
								ctx context.Context,
								opts ...func(*{{$e.Type.QueryName}}),
							) *{{$node.QueryName}} {
								fn := func(q *{{$e.Type.QueryName}}) {
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
									{{- end }}
								}
								newOpts := append(opts, fn)
								return {{$node.Receiver}}.WithNamed{{pascal $e.Name}}("{{$a.Name}}", newOpts...)
							}

							func ({{$node.Receiver}} *{{$node.Name}}) {{pascal $fieldname}}(ctx context.Context) ([]*{{$e.Type.Name}}, error) {
								items, err := {{$node.Receiver}}.Named{{pascal $e.Name}}("{{$a.Name}}")
								if IsNotLoaded(err) {
									q := {{$node.Receiver}}.Query{{pascal $e.Name}}()
									{{- if $a.IncludeWhere }}
									q.{{$whereName}}(ctx)
									{{- end }}
									{{- if $a.OrderFieldName }}
									order := &{{$e.Type.Name}}Order{Field: {{$e.Type.Name}}OrderField{{$a.OrderFieldName}}, Direction: "{{$a.OrderFieldDirection}}"}
									q = q.Order(order.Field.toTerm(order.Direction.OrderTermOption()))
									{{- end }}
									items, err = q.All(ctx)
								} else if err != nil {
									return nil, err
								}
								return items, err
							}
						{{end}}
					{{end}}
				{{end}}

			{{ end }}
		{{- end }}
	{{- end }}

{{ end }}
