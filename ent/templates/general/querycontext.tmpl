{{ define "lib/interceptor/querycontext" }}
{{- $pkg := "interceptor" -}}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

type (
	// QueryPathContext contains all previous queries run before the current one
	// when running separate sql queries as part of one entql or graphql query
	// using collected fields / eager loading
	//
	// Note: this will not track the path on standard query builder since this is
	// implemented as an interceptor which only runs on the final query.
	//
	// Ex:
	// The first query will only return "Comments" in the path, while the second
	// will return ["User", "Post", "Comments"]
	//
	//     client.User.Query().QueryPost().QueryComments().All(ctx)
	//
	//     client.User.Query().WithPosts(
	//       func(q *ent.PostQuery) {
	//         q.WithComments()
	//       },
	//     ).All(ctx)
	QueryPathContext struct {
		Path []string
	}
	queryCtxKey struct{}
)

// NewQueryPathContext returns a new context with the given QueryPathContext attached.
func NewQueryPathContext(parent context.Context, queryType string) context.Context {
	c, ok := parent.Value(queryCtxKey{}).(*QueryPathContext)
	if ok {
		newPath := append(c.Path, queryType)
		return context.WithValue(parent, queryCtxKey{}, &QueryPathContext{Path: newPath})
	}

	return context.WithValue(
		parent,
		queryCtxKey{},
		&QueryPathContext{Path: []string{queryType}},
	)
}

// QueryPathFromContext returns the QueryPathContext value stored in ctx, if any.
func QueryPathFromContext(ctx context.Context) *QueryPathContext {
	c, _ := ctx.Value(queryCtxKey{}).(*QueryPathContext)
	return c
}

{{ end }}
