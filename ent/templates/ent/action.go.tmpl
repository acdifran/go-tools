{{- define "action" }}
{{- $node := $.Node }}
{{- $pkg := base $node.Config.Package }}
{{- $client := $node.ClientName -}}
{{- $createBuilder := $node.CreateName }}
{{- $updateBuilder := $node.UpdateOneName }}
{{- $createReceiver := $node.CreateReceiver }}
{{- $updateReceiver := receiver $updateBuilder }}
{{- $actionFn := "ActionFn" }}
{{- $createAction := print $node.Name "CreateAction" }}
{{- $updateAction := print $node.Name "UpdateAction" }}
{{- $createActionReceiver := print $node.CreateReceiver "a" }}
{{- $updateActionReceiver := print $node.UpdateReceiver "a" }}
{{- $actionReceiver := print $node.Receiver "a" }}
{{- $action := print $node.Name "Action" }}
// Code generated by ent, DO NOT EDIT.

package {{ $pkg  }}

import (
	"context"
	"fmt"
)

type {{$createAction}} struct {
  builder *{{$createBuilder}}
	*{{$node.Name}}Action
}

type {{$updateAction}} struct {
	builder *{{$updateBuilder}}
	*{{$node.Name}}Action
}

type {{$node.Name}}Action struct {
	actions             []{{$actionFn}}
	actionNames         []string
	changesets          []Changeset
	prereqChangesets    []Changeset
	txChangesets        []Changeset
	txPrereqChangesets  []Changeset
}

func ({{$createActionReceiver}} *{{$createAction}}) Client() *Client {
	return {{$createActionReceiver}}.builder.mutation.Client()
}

func ({{$updateActionReceiver}} *{{$updateAction}}) Client() *Client {
	return {{$updateActionReceiver}}.builder.mutation.Client()
}

func ({{$actionReceiver}} *{{$action}}) AddChangesets(changesets ...Changeset) {
	for _, changeset := range changesets {
		if changeset.AlwaysTx() {
			{{$actionReceiver}}.txChangesets = append({{$actionReceiver}}.txChangesets, changeset)
		} else {
			{{$actionReceiver}}.changesets = append({{$actionReceiver}}.changesets, changeset)
		}
	}
}

func ({{$actionReceiver}} *{{$action}}) AddPrerequisiteChangesets(changesets ...Changeset) {
	for _, changeset := range changesets {
		if changeset.AlwaysTx() {
			{{$actionReceiver}}.txPrereqChangesets = append({{$actionReceiver}}.txPrereqChangesets, changeset)
		} else {
			{{$actionReceiver}}.prereqChangesets = append({{$actionReceiver}}.prereqChangesets, changeset)
		}
	}
}

func ({{$createActionReceiver}} *{{$createAction}}) MakeChangeset(name string, options ...ChangesetOption) *OneChangeset {
	return NewOneChangeset(name, {{$createActionReceiver}}, options...)
}

func ({{$createActionReceiver}} *{{$createAction}}) setConfig(config config) {
	{{$createActionReceiver}}.builder.config = config
	{{$createActionReceiver}}.builder.mutation.config = config
}

func ({{$createActionReceiver}} *{{$createAction}}) Exec(ctx context.Context) error {
	_, err := {{$createActionReceiver}}.Save(ctx)
	return err
}

func ({{$createActionReceiver}} *{{$createAction}}) ExecX(ctx context.Context) {
	_, err := {{$createActionReceiver}}.Save(ctx)
	if err != nil {
		panic(err)
	}
}

func ({{$createActionReceiver}} *{{$createAction}}) SaveX(ctx context.Context) *{{$node.Name}} {
	{{lower $node.Name}}, err := {{$createActionReceiver}}.Save(ctx)
	if err != nil {
		panic(err)
	}
	return {{lower $node.Name}}
}

func ({{$updateActionReceiver}} *{{$updateAction}}) MakeChangeset(name string, options ...ChangesetOption) *OneChangeset {
	return NewOneChangeset(name, {{$updateActionReceiver}}, options...)
}

func ({{$updateActionReceiver}} *{{$updateAction}}) setConfig(config config) {
	{{$updateActionReceiver}}.builder.config = config
	{{$updateActionReceiver}}.builder.mutation.config = config
}

func ({{$updateActionReceiver}} *{{$updateAction}}) Exec(ctx context.Context) error {
	_, err := {{$updateActionReceiver}}.Save(ctx)
	return err
}

func ({{$updateActionReceiver}} *{{$updateAction}}) ExecX(ctx context.Context) {
	_, err := {{$updateActionReceiver}}.Save(ctx)
	if err != nil {
		panic(err)
	}
}

func ({{$updateActionReceiver}} *{{$updateAction}}) SaveX(ctx context.Context) *{{$node.Name}} {
	{{lower $node.Name}}, err := {{$updateActionReceiver}}.Save(ctx)
	if err != nil {
		panic(err)
	}
	return {{lower $node.Name}}
}

{{ $runtimeRequired := or $node.NumHooks $node.NumPolicy }}
func ({{$createActionReceiver}} *{{$createAction}}) Save(ctx context.Context) (*{{$node.Name}}, error) {
	ctx = NewActionsContext(ctx, {{$createActionReceiver}}.actionNames)
	for _, action := range {{$createActionReceiver}}.actions {
		err := action(ctx)
		if err != nil {
			return nil, err
		}
	}

	for _, changeset := range {{$createActionReceiver}}.prereqChangesets {
		err := changeset.Exec(ctx)
		if err != nil {
			return nil, fmt.Errorf("running prereq changeset %v: %w", changeset.Name(), err)
		}
	}

	var {{lower $node.Name}} *{{$node.Name}}
	var err error
	if len({{$createActionReceiver}}.txChangesets) > 0 || len({{$createActionReceiver}}.txPrereqChangesets) > 0 {
		{{lower $node.Name}}, err = WithTx(ctx, {{$createActionReceiver}}.builder.mutation.Client(), func(tx *Tx) (*{{$node.Name}}, error) {
			for _, changeset := range {{$createActionReceiver}}.txPrereqChangesets {
				changeset.setConfig(tx.config)
				err := changeset.Exec(ctx)
				if err != nil {
					return nil, fmt.Errorf("running prereq changeset %v: %w", changeset.Name(), err)
				}
			}

			{{$createActionReceiver}}.setConfig(tx.config)
			{{lower $node.Name}}, err := {{$createActionReceiver}}.builder.Save(ctx)
			if err != nil {
				return nil, fmt.Errorf("Saving {{$node.Name}} create: %w", err)
			}

			for _, changeset := range {{$createActionReceiver}}.txChangesets {
				changeset.setConfig(tx.config)
				err := changeset.Exec(ctx)
				if err != nil {
					return nil, fmt.Errorf("running changeset %v: %w", changeset.Name(), err)
				}
			}

			return {{lower $node.Name}}, nil
		})
		if err != nil {
			return nil, fmt.Errorf("Running tx mutations: %w", err)
		}
	} else {
		{{lower $node.Name}}, err = {{$createActionReceiver}}.builder.Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("Saving {{$node.Name}} create: %w", err)
		}
	}

	for _, changeset := range {{$createActionReceiver}}.changesets {
		err := changeset.Exec(ctx)
		if err != nil {
			return nil, fmt.Errorf("running changeset %v: %w", changeset.Name(), err)
		}
	}

	return {{lower $node.Name}}, nil
}

func ({{$updateActionReceiver}} *{{$updateAction}}) Save(ctx context.Context) (*{{$node.Name}}, error) {
	ctx = NewActionsContext(ctx, {{$updateActionReceiver}}.actionNames)
	for _, action := range {{$updateActionReceiver}}.actions {
		err := action(ctx)
		if err != nil {
			return nil, err
		}
	}

	for _, changeset := range {{$updateActionReceiver}}.prereqChangesets {
		err := changeset.Exec(ctx)
		if err != nil {
			return nil, fmt.Errorf("running prereq changeset %v: %w", changeset.Name(), err)
		}
	}

	var {{lower $node.Name}} *{{$node.Name}}
	var err error
	if len({{$updateActionReceiver}}.txChangesets) > 0 || len({{$updateActionReceiver}}.txPrereqChangesets) > 0 {
		{{lower $node.Name}}, err = WithTx(ctx, {{$updateActionReceiver}}.builder.mutation.Client(), func(tx *Tx) (*{{$node.Name}}, error) {
			for _, changeset := range {{$updateActionReceiver}}.txPrereqChangesets {
				changeset.setConfig(tx.config)
				err := changeset.Exec(ctx)
				if err != nil {
					return nil, fmt.Errorf("running prereq changeset %v: %w", changeset.Name(), err)
				}
			}

			{{$updateActionReceiver}}.setConfig(tx.config)
			{{lower $node.Name}}, err := {{$updateActionReceiver}}.builder.Save(ctx)
			if err != nil {
				return nil, fmt.Errorf("Saving {{$node.Name}} update: %w", err)
			}

			for _, changeset := range {{$updateActionReceiver}}.txChangesets {
				changeset.setConfig(tx.config)
				err := changeset.Exec(ctx)
				if err != nil {
					return nil, fmt.Errorf("running changeset %v: %w", changeset.Name(), err)
				}
			}

			return {{lower $node.Name}}, nil
		})
		if err != nil {
			return nil, fmt.Errorf("Running tx mutations: %w", err)
		}
	} else {
	{{lower $node.Name}}, err = {{$updateActionReceiver}}.builder.Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("Saving {{$node.Name}} update: %w", err)
		}
	}

	for _, changeset := range {{$updateActionReceiver}}.changesets {
		err := changeset.Exec(ctx)
		if err != nil {
			return nil, fmt.Errorf("running changeset %v: %w", changeset.Name(), err)
		}
	}

	return {{lower $node.Name}}, nil
}

{{ range $action := $.Actions }}

{{- if $action.DocComment }}
// {{ $action.DocComment }}
{{- end -}}
{{- $receiver := $createActionReceiver}}
{{- $mutationReceiver := $createReceiver}}
{{- $actionType := $createAction}}
{{- $mutationType := $node.CreateName}}
{{- if eq $action.Type "Update"}}
{{- $receiver = $updateActionReceiver}}
{{- $mutationReceiver = $updateReceiver}}
{{- $actionType = $updateAction}}
{{- $mutationType = $node.UpdateOneName}}
{{- end }}
{{- $actionName := print "Action" $action.Type "And" $action.Name}}
{{- $actionCtxName := print $node.Name $action.Name}}
{{- if $action.IsDefault }}
{{- $actionName = print "Action" $action.Type}}
{{- $actionCtxName := print $node.Name $action.Type}}
{{- end }}
{{- if $action.GenericEntType }}
func ({{$receiver}} *{{$actionType}}) {{ $actionName }}({{if not $action.NoArgs}}args {{if $action.NillableArgs}}*{{end}}{{ $action.GenericEntType }}{{ $action.Name }}Input{{end}}) *{{$actionType}} {
	fn := func(ctx context.Context) error {
		{{if and (not $action.NoArgs) $action.NillableArgs}}
		if args == nil {
			args = &{{ $action.GenericEntType }}{{ $action.Name }}Input{}
		}
		{{end}}
		e := &{{ $node.Name }}{ID: *{{$receiver}}.builder.mutation.id, config: {{$receiver}}.builder.config}
		a := {{$receiver}}
		u := {{$receiver}}.builder
		c := {{$receiver}}.builder.mutation.Client()
		return {{ $action.GenericEntType }}{{ $actionName }}Impl(ctx, e, a, u, c {{if not $action.NoArgs}}, {{if $action.NillableArgs}}*{{end}}args {{end}})
	}

	{{$receiver}}.actions = append({{$receiver}}.actions, fn)
	{{$receiver}}.actionNames = append({{$receiver}}.actionNames, "{{ $actionCtxName }}")
	return {{$receiver}}
}

func ({{$mutationReceiver}} *{{$mutationType}}) {{ $actionName }}({{if not $action.NoArgs}}args {{if $action.NillableArgs}}*{{end}}{{ $action.GenericEntType }}{{ $action.Name }}Input{{end}}) *{{$actionType}} {
	{{$node.Receiver}}a := &{{$node.Name}}Action{}
	{{$receiver}} := &{{$actionType}}{ builder: {{$mutationReceiver}}, {{$node.Name}}Action: {{$node.Receiver}}a }
	fn := func(ctx context.Context) error {
		{{if and (not $action.NoArgs) $action.NillableArgs}}
		if args == nil {
			args = &{{ $action.GenericEntType }}{{ $action.Name }}Input{}
		}
		{{end}}
		e := &{{ $node.Name }}{ID: *{{$receiver}}.builder.mutation.id, config: {{$receiver}}.builder.config}
		a := {{$receiver}}
		u := {{$receiver}}.builder
		c := {{$receiver}}.builder.mutation.Client()
		return {{ $action.GenericEntType }}{{ $actionName }}Impl(ctx, e, a, u, c {{if not $action.NoArgs}}, {{if $action.NillableArgs}}*{{end}}args {{end}})
	}

	{{$receiver}}.actions = append({{$receiver}}.actions, fn)
	{{$receiver}}.actionNames = append({{$receiver}}.actionNames, "{{ $actionCtxName }}")
	return {{$receiver}}
}

{{ else }}
func ({{$receiver}} *{{$actionType}}) {{ $actionName }}({{if not $action.NoArgs}}args {{if $action.NillableArgs}}*{{end}}{{$node.Name}}{{$action.Name}}Input{{end}}) *{{$actionType}} {
	{{if and (not $action.NoArgs) $action.NillableArgs}}
	if args == nil {
		args = &{{ $node.Name }}{{ $action.Name }}Input{}
	}
	{{end}}
	fn := func(ctx context.Context) error {
		err := {{$node.Name}}{{$actionName}}Impl(ctx, {{$receiver}}{{if not $action.NoArgs}}, {{if $action.NillableArgs}}*{{end}}args {{end}})
		if err != nil {
			return fmt.Errorf("running {{$node.Name}} action {{$action.Name}}: %w", err)
		}
		return nil
	}

	{{$receiver}}.actions = append({{$receiver}}.actions, fn)
	{{$receiver}}.actionNames = append({{$receiver}}.actionNames, "{{ $actionCtxName }}")
	return {{$receiver}}
}

func ({{$mutationReceiver}} *{{$mutationType}}) {{ $actionName }}({{if not $action.NoArgs}}args {{if $action.NillableArgs}}*{{end}}{{$node.Name}}{{$action.Name}}Input{{end}}) *{{$actionType}} {
	{{if and (not $action.NoArgs) $action.NillableArgs}}
	if args == nil {
		args = &{{ $node.Name }}{{ $action.Name }}Input{}
	}
	{{end}}
	{{$node.Receiver}}a := &{{$node.Name}}Action{}
	{{$receiver}} := &{{$actionType}}{ builder: {{$mutationReceiver}}, {{$node.Name}}Action: {{$node.Receiver}}a }
	fn := func(ctx context.Context) error {
		err := {{$node.Name}}{{$actionName}}Impl(ctx, {{$receiver}}{{if not $action.NoArgs}}, {{if $action.NillableArgs}}*{{end}}args {{end}})
		if err != nil {
			return fmt.Errorf("running {{$node.Name}} action {{$action.Name}}: %w", err)
		}
		return nil
	}

	{{$receiver}}.actions = append({{$receiver}}.actions, fn)
	{{$receiver}}.actionNames = append({{$receiver}}.actionNames, "{{ $actionCtxName }}")
	return {{$receiver}}
}

{{ end }}
{{- end }}

{{ end }}
